--- 
import ProjectCard from '../components/ProjectCard.astro';
import fuelCalculatorImg from '../assets/fuel-calculator.png';
import drxcuImg from '../assets/drxcu.png';
import wipImg from '../assets/wip.png';

const projects = [
  {
    title: 'Fuel-Calculator',
    description: 'Compares coupons to find the best deal to buy fuel.',
    imageUrl: fuelCalculatorImg.src,
    link: 'https://drxcu.com/fuel-calculator',
    technologies: ['HTML', 'JavaScript', 'Cloudflare', 'GPT', 'CSS'],
  },
  {
    title: 'FlexScribe',
    description: 'A WIP transcription service that uses AI to transcribe audio files.',
    imageUrl: wipImg.src,
    link: 'https://drxcu.com/flexscribe',
    technologies: ['JStack', 'Whisper', 'fal.ai', 'PyAnnote', 'WIP'],
  },
  {
    title: 'NextGPT',
    description: 'A WIP app to create custom-knowledge chatbots with minimal setup and configuration.',
    imageUrl: wipImg.src,
    link: '#',
    technologies: ['LLMs', 'Vector Databases', 'Key-Value Databases', 'Reinforcement Learning', 'WIP'],
  },
  {
    title: 'drxcu.com',
    description: 'This very website you are on right now.',
    imageUrl: drxcuImg.src,
    link: 'https://drxcu.com',
    technologies: ['Astro', 'tailwind', 'Cloudflare', 'Gemini 2.0', 'o3-mini'],
  },
];
---

<section
  id="projects"
  class="relative h-screen text-white flex items-center justify-center overflow-auto bg-neutral-800"
>
  <div class="container mx-auto px-4 py-16 sm:py-8">
    <h2
      class="text-3xl sm:text-5xl md:text-6xl font-bold mb-16 sm:mb-36 text-left underline decoration-orange-500"
    >
      My Projects
    </h2>

    <div class="carousel-container relative w-full px-4 sm:px-8 overflow-hidden max-h-[70vh] sm:max-h-[80vh] flex items-center justify-center box-border">
      <!-- The carousel now includes clones at each end -->
      <div id="carousel" class="carousel flex transition-transform duration-500">
        <!-- Clone of the last project -->
        <div class="w-full h-full flex-shrink-0 flex items-center justify-center" data-clone="clone-last">
          <ProjectCard {...projects[projects.length - 1]} />
        </div>

        <!-- Actual project slides -->
        {projects.map((project) => (
          <div class="w-full h-full flex-shrink-0 flex items-center justify-center">
            <ProjectCard {...project} />
          </div>
        ))}

        <!-- Clone of the first project -->
        <div class="w-full h-full flex-shrink-0 flex items-center justify-center" data-clone="clone-first">
          <ProjectCard {...projects[0]} />
        </div>
      </div>

      <button
        class="absolute top-1/2 transform -translate-y-1/2 left-2 sm:left-4 bg-neutral-700 hover:bg-neutral-600 text-white p-2 sm:p-4 rounded-full focus:outline-none focus:ring-2 focus:ring-orange-500 z-10"
        id="prevBtn"
      >
        &lt;
      </button>
      <button
        class="absolute top-1/2 transform -translate-y-1/2 right-2 sm:right-4 bg-neutral-700 hover:bg-neutral-600 text-white p-2 sm:p-4 rounded-full focus:outline-none focus:ring-2 focus:ring-orange-500 z-10"
        id="nextBtn"
      >
        &gt;
      </button>

      <!-- Navigation dots – note we use bottom-4 so they're visible -->
      <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2">
        {projects.map((_, index) => (
          <button
            class="w-3 h-3 rounded-full bg-neutral-600 transition-colors duration-300 nav-dot focus:outline-none focus:ring-2 focus:ring-orange-500"
            data-index={index}
          ></button>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .carousel {
    display: flex;
  }
  .carousel-container {
    max-width: 1200px;
    width: 100%;
    margin: 0 auto;
    position: relative;
    box-sizing: border-box;
    min-height: 340px;
  }
  @media (max-width: 640px) {
    .carousel-container {
      max-width: 100vw;
      padding-left: 0.25rem;
      padding-right: 0.25rem;
      min-height: 220px;
      max-height: 70vh;
    }
    .carousel .w-full {
      min-width: 100%;
      max-width: 100%;
    }
    h2 {
      font-size: 2rem;
      margin-bottom: 2rem;
    }
  }
  .nav-dot.active {
    background-color: rgb(249, 115, 22); /* Orange-500 */
  }
</style>

<script>
  // Grab DOM elements
  const carousel = document.getElementById("carousel");
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");
  const dots = document.querySelectorAll(".nav-dot");
  const container = document.querySelector(".carousel-container");

  // The total number of DOM slides is our projects plus two clones.
  const totalSlides = carousel.children.length; // projects.length + 2
  let cardWidth = carousel.children[0].offsetWidth; // Each slide's width

  // Recalculate cardWidth and reset scroll on resize
  window.addEventListener('resize', () => {
    cardWidth = carousel.children[0].offsetWidth;
    carousel.style.transition = 'none';
    carousel.style.transform = `translateX(${-cardWidth * counter}px)`;
  });
  let counter = 1; // Start at the first real slide (index 1)

  // Set initial position
  carousel.style.transform = `translateX(${-cardWidth * counter}px)`;

  // Update dots – the active dot corresponds to counter - 1
  const updateDots = () => {
    let activeIndex;
    if (counter === 0) {
      activeIndex = projects.length - 1;
    } else if (counter === totalSlides - 1) {
      activeIndex = 0;
    } else {
      activeIndex = counter - 1;
    }
    dots.forEach((dot, index) => {
      dot.classList.toggle("active", index === activeIndex);
    });
  };

  updateDots();

  // Helper function to move the carousel
  const slideTransition = () => {
    carousel.style.transition = "transform 0.5s";
    carousel.style.transform = `translateX(${-cardWidth * counter}px)`;
  };

  // Next button click
  nextBtn.addEventListener("click", () => {
    if (counter >= totalSlides - 1) return; // Prevent extra clicks
    counter++;
    slideTransition();
  });

  // Prev button click
  prevBtn.addEventListener("click", () => {
    if (counter <= 0) return;
    counter--;
    slideTransition();
  });

  // When the transition ends, check for clones and reset
  carousel.addEventListener("transitionend", () => {
    // If we've reached the clone of the first slide, jump back to the real first slide
    if (
      carousel.children[counter].getAttribute("data-clone") === "clone-first"
    ) {
      carousel.style.transition = "none";
      counter = 1;
      carousel.style.transform = `translateX(${-cardWidth * counter}px)`;
    }
    // If we've reached the clone of the last slide, jump to the real last slide
    if (
      carousel.children[counter].getAttribute("data-clone") === "clone-last"
    ) {
      carousel.style.transition = "none";
      counter = totalSlides - 2;
      carousel.style.transform = `translateX(${-cardWidth * counter}px)`;
    }
    updateDots();
  });

  // Dot click: slide directly to the corresponding slide (offset by 1)
  dots.forEach((dot, index) => {
    dot.addEventListener("click", () => {
      counter = index + 1;
      slideTransition();
      updateDots();
    });
  });

  // Update cardWidth on window resize
  window.addEventListener("resize", () => {
    cardWidth = container.offsetWidth;
    carousel.style.transition = "none";
    carousel.style.transform = `translateX(${-cardWidth * counter}px)`;
  });
</script>
